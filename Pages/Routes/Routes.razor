@page "/Routes/Routes"

@using blalogin.Data;
@using System.IO;
@using ExcelDataReader;

@using Syncfusion.XlsIO;
@using Syncfusion.Drawing;
@using System.Data;

@inject Microsoft.JSInterop.IJSRuntime JS;
@inject RouteService routeService;
@inject HttpClient client

@code {

    List<Route> RObj;

    public int CurrentPage { get; set; } = 1;
    public int Count { get; set; }
    public int PageSize { get; set; } = 10;
    public int TotalPages { get; set; } = 1;
    int startPage = 1;
    int endPage = 4;
    bool Islastpageload = false;
    bool IsfirstPageload = true;
    bool loading = false;

    public bool ShowPrevious => CurrentPage > 1;
    public bool ShowNext => CurrentPage < TotalPages;

    protected override async Task OnInitializedAsync()
    {
        RObj = await GetAllRoute();
        Count = await Task.Run(() => routeService.GetCountAsync());
        TotalPages = (int)Math.Ceiling(decimal.Divide(Count, PageSize));
    }
    async Task pageClick(int i)
    {
        if (loading == false)
        {
            loading = true;
            CurrentPage = i;
            if (endPage > 4)
            {
                IsfirstPageload = false;
            }
            if (startPage == 1)
            {
                IsfirstPageload = true;
            }
            RObj = await GetAllRoute();
            this.StateHasChanged();
        }
    }

    async Task loadNextfourpage(int i)
    {
        CurrentPage = i;
        if (CurrentPage > TotalPages)
        {
            CurrentPage = TotalPages;
        }

        if (endPage < TotalPages)
        {
            int _lastpage = 0;
            Islastpageload = false;
            if (CurrentPage >= endPage)
            {
                startPage = endPage + 1;
                _lastpage = startPage + 4;
                endPage = _lastpage >= TotalPages ? TotalPages : _lastpage;
            }
        }
        else
        {
            endPage = TotalPages;
            Islastpageload = true;
        }
        await pageClick(CurrentPage);
        // RObj = await GetAllRoute();
    }

    async Task loadpriviousfourpage(int i)
    {
        CurrentPage = i;
        if (CurrentPage <= 0)
        {
            CurrentPage = startPage;
        }
        int _fpage = 0;

        _fpage = CurrentPage - 4;
        if (_fpage > 0)
        {
            startPage = _fpage;
            endPage = startPage + 4;
            IsfirstPageload = false;
        }
        else
        {
            startPage = 1;
            endPage = 4;
        }
        await pageClick(CurrentPage);
        // RObj = await GetAllRoute();
    }
    public async Task<List<Route>> GetAllRoute()
    {
        var r = await Task.Run(() => routeService.GetAllRoutesAsync(CurrentPage, PageSize));
        RObj = r;
        loading = false;
        return r;
    }
    private string searchTerm;
    private List<Route> issues;
    async Task SearchIssues()
    {
        RObj = await routeService.SearchIssuesAsync(searchTerm);
    }
    private async Task Clear()
    {
        searchTerm = string.Empty;
        await SearchIssues();
    }
    string status;
    async Task HandleSelection(IFileListEntry[] files)
    {
        loading = true;
        List<Route> routs = new List<Route>();
        var file = files.FirstOrDefault();
        if (file != null)
        {
            // Just load into .NET memory to show it can be done
            // Alternatively it could be saved to disk, or parsed in memory, or similar
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);
            status = $"Finished loading {file.Size} bytes from {file.Name}";
            routs = new List<Route>();
            using (var reader = ExcelReaderFactory.CreateReader(ms))
            {
                int i = 0;
                while (reader.Read()) //Each row of the file
                {
                    if (i == 0)
                    {
                        i = 1;
                    }
                    else
                    {
                        routs.Add(new Route
                        {
                            // Id = Convert.ToInt32(reader.GetValue(0)),
                            Routename = reader.GetValue(0).ToString(),
                            Supervisorname = reader.GetValue(1).ToString(),
                            Billdays = Convert.ToInt32(reader.GetValue(2)),
                            Code = Convert.ToInt32(reader.GetValue(3))
                        });
                    }
                }
            }
            await SaveRoute(routs);
        }
    }

    async Task SaveRoute(List<Route> routes)
    {
        await routeService.SaveRoutes(routes);
        await GetAllRoute();
        loading = false;
        status = $"File Save Successfully in database";
    }

    async Task ExportToExcel()
    {
        using (ExcelEngine excelEngine = new ExcelEngine())
        {
            IApplication application = excelEngine.Excel;
            application.DefaultVersion = ExcelVersion.Xlsx;

            //Create a workbook.
            IWorkbook workbook = application.Workbooks.Create(1);
            IWorksheet worksheet = workbook.Worksheets[0];

            //Initialize DataTable and data get from SampleDataTable method.
            DataTable table = SampleDataTable();

            //Export data from DataTable to Excel worksheet.
            worksheet.ImportDataTable(table, true, 1, 1);

            worksheet.UsedRange.AutofitColumns();


            //Save the document as a stream and return the stream.
            using (MemoryStream stream = new MemoryStream())
            {
                //Save the created Excel document to MemoryStream
                workbook.SaveAs(stream);

                //Download the excel file.
                //await JS.SaveAs("Sample.xlsx", stream.ToArray());
            }
        }


    }
    private DataTable SampleDataTable()
    {
        DataTable reports = new DataTable();
        reports.Columns.Add("SalesPerson");
        reports.Columns.Add("Age", typeof(int));
        reports.Columns.Add("Salary", typeof(int));
        reports.Rows.Add("Andy Bernard", 21, 30000);
        reports.Rows.Add("Jim Halpert", 25, 40000);
        reports.Rows.Add("Karen Fillippelli", 30, 50000);
        reports.Rows.Add("Phyllis Lapin", 34, 39000);
        reports.Rows.Add("Stanley Hudson", 45, 58000);

        return reports;
    }

    public async Task NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (CurrentPage < TotalPages)
            {
                if (CurrentPage == startPage)
                {
                    SetPagerSize("forward");
                }
                CurrentPage += 1;
            }
            await loadNextfourpage(CurrentPage);
        }
        else if (direction == "previous")
        {
            if (CurrentPage > 1)
            {
                if (CurrentPage == startPage)
                {
                    SetPagerSize("back");
                }
                CurrentPage -= 1;
            }
            await loadpriviousfourpage(CurrentPage);
        }
        // await pageClick(CurrentPage);
    }

    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < TotalPages)
        {
            startPage = endPage + 1;
            if (endPage + PageSize < TotalPages)
            {
                endPage = startPage + PageSize - 1;
            }
            else
            {
                endPage = TotalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - PageSize;
        }
    }


}


<h3>Route List</h3>
<div class="row">      <h5>Message : - @status</h5> </div>
<div class="row">
    <div class="col">
        <NavLink class="nav-link" href="Routes/AddRoute">
            <button type="button" class="btn btn-primary"><i class="oi oi-plus"></i>   Add New</button>
        </NavLink>
    </div>
    <div class="col">
        <input type="text" @bind-value="@searchTerm" />
        <input type="button" class="btn btn-primary" required value="Search" @onclick="@SearchIssues" />
        <input type="button" class="btn btn-danger" value="Clear" @onclick="@Clear" />
    </div>
    <div class="col">

        <div class="form-control">
            <InputFile hidden="@loading" OnChange="HandleSelection" />
            @*<button class="btn-info" @onclick="@UploadData">Upload data</button>*@
        </div>
        @*<form method="post" enctype="multipart/form-data" class="form-group">
                <div>
                    <input name="file" type="file" class="form-control-file" required />
                    <input type="button" class="btn btn-primary" required value="Import" />
                </div>
            </form>*@
    </div>
    <div class="col">
        <button class="btn-info" @onclick="ExportToExcel">Export to Excel</button>
    </div>
</div>


@if (RObj is null)
{
    <p><em>Loading... !</em></p> }
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Routename Name</th>
                <th>Billdays</th>
                <th>Supervisorname</th>
                <th>Code</th>
                <th>Action</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var emp in RObj)
            {
                <tr>
                    <td>@emp.Id</td>
                    <td>@emp.Routename</td>
                    <td>@emp.Billdays</td>
                    <td>@emp.Supervisorname</td>
                    <td>@emp.Code</td>
                    <td>
                        <a class="nav-link" href="Routes/EditRoute/@emp.Id">
                            <button type="button" class="btn btn-outline-success"> <i class="fa fa-edit"></i> Edit</button>
                        </a>
                    </td>
                    <td>
                        <a class="nav-link" href="Routes/Delete/@emp.Id">
                            <button type="button" class="btn btn-outline-danger"><i class="fa fa-trash"></i>  Delete</button>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div>
        <ul class="pagination">
            <li>
                <a class="page-link" @onclick=@(async ()=>await NavigateToPage("previous"))>Prev</a>
            </li>
            <li class="page-item" hidden="@IsfirstPageload">
                <a @onclick="async () => await loadpriviousfourpage(startPage -1)"
                   class="page-link">...</a>
            </li>
            @for (var i = startPage; i <= endPage; i++)
            {
                var cur = i;
                <li class="page-item @(i == CurrentPage ? "active" : "")">
                    <a @onclick="async () => await pageClick(cur)"
                       asp-route-currentpage="@i"
                       class="page-link">@i</a>
                </li>

            }
            <li class="page-item" hidden="@Islastpageload">
                <a @onclick="async () => await loadNextfourpage(endPage+1)"
                   class="page-link">...</a>
            </li>
            <li>
                <a class="page-link" @onclick=@(async ()=>await NavigateToPage("next"))>Next</a>
            </li>
        </ul>
    </div>
}






