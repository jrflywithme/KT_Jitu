// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace blalogin.Pages.Routes
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Sri\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Sri\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Sri\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Sri\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Sri\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Sri\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Sri\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Sri\_Imports.razor"
using blalogin;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Sri\_Imports.razor"
using blalogin.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Sri\_Imports.razor"
using BlazorInputFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Sri\Pages\Routes\Routes.razor"
using blalogin.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Sri\Pages\Routes\Routes.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Sri\Pages\Routes\Routes.razor"
using ExcelDataReader;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Routes/Routes")]
    public partial class Routes : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 10 "D:\Sri\Pages\Routes\Routes.razor"
       

    List<Route> RObj;

    public int CurrentPage { get; set; } = 1;
    public int Count { get; set; }
    public int PageSize { get; set; } = 10;
    public int TotalPages { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        RObj = await GetAllRoute();
        Count = await Task.Run(() => routeService.GetCountAsync());
        TotalPages = (int)Math.Ceiling(decimal.Divide(Count, PageSize));
    }
    async Task pageClick(int i)
    {
        CurrentPage = i;
        RObj = await GetAllRoute();
        this.StateHasChanged();
    }
    void pageClick1(int i)
    {
        CurrentPage = i;
        // RObj = await GetAllRoute();
    }
    public async Task<List<Route>> GetAllRoute()
    {
        var r = await Task.Run(() => routeService.GetAllRoutesAsync(CurrentPage, PageSize));
        RObj = r;
        return r;
    }
    private string searchTerm;
    private List<Route> issues;
    async Task SearchIssues()
    {
        RObj = await routeService.SearchIssuesAsync(searchTerm);
    }
    private async Task Clear()
    {
        searchTerm = string.Empty;
        await SearchIssues();
    }
    string status;
    async Task HandleSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            // Just load into .NET memory to show it can be done
            // Alternatively it could be saved to disk, or parsed in memory, or similar
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);
            status = $"Finished loading {file.Size} bytes from {file.Name}";
            List<Route> routs = new List<Route>();
            using (var reader = ExcelReaderFactory.CreateReader(ms))
            {
                int i = 0;
                while (reader.Read()) //Each row of the file
                {
                    if (i == 0)
                    {
                        i = 1;
                    }
                    else
                    {
                        routs.Add(new Route
                        {
                            // Id = Convert.ToInt32(reader.GetValue(0)),
                            Routename = reader.GetValue(1).ToString(),
                            Supervisorname = reader.GetValue(2).ToString(),
                            Billdays = Convert.ToInt32(reader.GetValue(3)),
                            Code = Convert.ToInt32(reader.GetValue(4))
                        });
                    }
                }
            }
            await SaveRoute(routs);
        }
    }

    async Task SaveRoute(List<Route> routes)
    {
        await routeService.SaveRoutes(routes);
        await GetAllRoute();
        status = $"File Save Successfully in database";
    }



#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient client { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private RouteService routeService { get; set; }
    }
}
#pragma warning restore 1591
